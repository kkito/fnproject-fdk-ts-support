"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FdkUtil = exports.DEFAULT_CORS_ORIGIN = void 0;
const fdk_1 = __importDefault(require("@fnproject/fdk"));
exports.DEFAULT_CORS_ORIGIN = '*';
class FdkUtil {
    static setCors(ctx, origin) {
        if (!origin) {
            origin = exports.DEFAULT_CORS_ORIGIN;
        }
        const hctx = ctx.httpGateway;
        hctx.setResponseHeader('Access-Control-Allow-Origin', origin);
        hctx.setResponseHeader('Access-Control-Allow-Credentials', 'true');
        hctx.setResponseHeader('Access-Control-Allow-Headers', 'x-requested-with, Content-Type, x-request-uv, Authorization');
        hctx.setResponseHeader('Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS');
    }
    static setCorsByReferer(ctx) {
        return this.setCors(ctx);
    }
    static setResponse(ctx, resText, resCode) {
        ctx.httpGateway.statusCode = resCode;
        return fdk_1.default.rawResult(resText);
    }
    static get methodType() {
        return {
            isOption: (ctx) => this.checkMethod(ctx, 'OPTIONS'),
            isGET: (ctx) => this.checkMethod(ctx, 'GET'),
            isPOST: (ctx) => this.checkMethod(ctx, 'POST'),
            isPUT: (ctx) => this.checkMethod(ctx, 'PUT'),
            isDELETE: (ctx) => this.checkMethod(ctx, 'DELETE')
        };
    }
    static checkMethod(ctx, method) {
        return ctx.httpGateway.method === method.toUpperCase();
    }
}
exports.FdkUtil = FdkUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseURBQWdDO0FBYW5CLFFBQUEsbUJBQW1CLEdBQUcsR0FBRyxDQUFBO0FBRXRDLE1BQWEsT0FBTztJQUNYLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBYyxFQUFFLE1BQWU7UUFDbkQsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sR0FBRywyQkFBbUIsQ0FBQTtTQUM3QjtRQUNELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUE7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLDZCQUE2QixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNsRSxJQUFJLENBQUMsaUJBQWlCLENBQ3BCLDhCQUE4QixFQUM5Qiw2REFBNkQsQ0FDOUQsQ0FBQTtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FDcEIsOEJBQThCLEVBQzlCLGlDQUFpQyxDQUNsQyxDQUFBO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFjO1FBRTNDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFjLEVBQUUsT0FBZSxFQUFFLE9BQWU7UUFDeEUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFBO1FBQ3BDLE9BQU8sYUFBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sTUFBTSxLQUFLLFVBQVU7UUFDMUIsT0FBTztZQUNMLFFBQVEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO1lBQzlELEtBQUssRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO1lBQ3ZELE1BQU0sRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDO1lBQ3pELEtBQUssRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO1lBQ3ZELFFBQVEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO1NBQzlELENBQUE7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFjLEVBQUUsTUFBYztRQUN0RCxPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUN4RCxDQUFDO0NBQ0Y7QUF6Q0QsMEJBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZkayBmcm9tICdAZm5wcm9qZWN0L2ZkaydcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNsYXNzLW5hbWVcbmludGVyZmFjZSBmbkh0dHBHYXRld2F5IHtcbiAgc2V0UmVzcG9uc2VIZWFkZXI6IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gdm9pZFxuICBtZXRob2Q6IHN0cmluZ1xuICBzdGF0dXNDb2RlOiBudW1iZXJcbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjbGFzcy1uYW1lXG5pbnRlcmZhY2UgZm5Db250ZXh0IHtcbiAgaHR0cEdhdGV3YXk6IGZuSHR0cEdhdGV3YXlcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09SU19PUklHSU4gPSAnKidcblxuZXhwb3J0IGNsYXNzIEZka1V0aWwge1xuICBwdWJsaWMgc3RhdGljIHNldENvcnMoY3R4OiBmbkNvbnRleHQsIG9yaWdpbj86IHN0cmluZykge1xuICAgIGlmICghb3JpZ2luKSB7XG4gICAgICBvcmlnaW4gPSBERUZBVUxUX0NPUlNfT1JJR0lOXG4gICAgfVxuICAgIGNvbnN0IGhjdHggPSBjdHguaHR0cEdhdGV3YXlcbiAgICBoY3R4LnNldFJlc3BvbnNlSGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCBvcmlnaW4pXG4gICAgaGN0eC5zZXRSZXNwb25zZUhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMnLCAndHJ1ZScpXG4gICAgaGN0eC5zZXRSZXNwb25zZUhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICAgICd4LXJlcXVlc3RlZC13aXRoLCBDb250ZW50LVR5cGUsIHgtcmVxdWVzdC11diwgQXV0aG9yaXphdGlvbidcbiAgICApXG4gICAgaGN0eC5zZXRSZXNwb25zZUhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJyxcbiAgICAgICdQT1NULCBQVVQsIEdFVCwgREVMRVRFLCBPUFRJT05TJ1xuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0Q29yc0J5UmVmZXJlcihjdHg6IGZuQ29udGV4dCkge1xuICAgIC8vIFRPRE9cbiAgICByZXR1cm4gdGhpcy5zZXRDb3JzKGN0eClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2V0UmVzcG9uc2UoY3R4OiBmbkNvbnRleHQsIHJlc1RleHQ6IHN0cmluZywgcmVzQ29kZTogbnVtYmVyKSB7XG4gICAgY3R4Lmh0dHBHYXRld2F5LnN0YXR1c0NvZGUgPSByZXNDb2RlXG4gICAgcmV0dXJuIGZkay5yYXdSZXN1bHQocmVzVGV4dClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG1ldGhvZFR5cGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzT3B0aW9uOiAoY3R4OiBmbkNvbnRleHQpID0+IHRoaXMuY2hlY2tNZXRob2QoY3R4LCAnT1BUSU9OUycpLFxuICAgICAgaXNHRVQ6IChjdHg6IGZuQ29udGV4dCkgPT4gdGhpcy5jaGVja01ldGhvZChjdHgsICdHRVQnKSxcbiAgICAgIGlzUE9TVDogKGN0eDogZm5Db250ZXh0KSA9PiB0aGlzLmNoZWNrTWV0aG9kKGN0eCwgJ1BPU1QnKSxcbiAgICAgIGlzUFVUOiAoY3R4OiBmbkNvbnRleHQpID0+IHRoaXMuY2hlY2tNZXRob2QoY3R4LCAnUFVUJyksXG4gICAgICBpc0RFTEVURTogKGN0eDogZm5Db250ZXh0KSA9PiB0aGlzLmNoZWNrTWV0aG9kKGN0eCwgJ0RFTEVURScpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjaGVja01ldGhvZChjdHg6IGZuQ29udGV4dCwgbWV0aG9kOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY3R4Lmh0dHBHYXRld2F5Lm1ldGhvZCA9PT0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgfVxufVxuIl19